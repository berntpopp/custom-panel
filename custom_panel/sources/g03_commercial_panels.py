"""
Commercial diagnostic panels data source extractor.

This module processes JSON files generated by the scrapers framework to extract
gene data from commercial diagnostic panel websites.
"""

import json
import logging
from pathlib import Path
from typing import Any

import pandas as pd

from ..core.config_manager import ConfigManager
from ..core.io import create_standard_dataframe

logger = logging.getLogger(__name__)


def fetch_commercial_panels_data(config: dict[str, Any]) -> pd.DataFrame:
    """
    Fetch gene panel data from scraped commercial panel JSON files.

    Args:
        config: Configuration dictionary

    Returns:
        Standardized DataFrame with commercial panel data
    """
    config_manager = ConfigManager(config)
    commercial_config = config_manager.get_source_config("Commercial_Panels")

    if not commercial_config.get("enabled", True):
        logger.info("Commercial panels data source is disabled")
        return pd.DataFrame()

    panels_config = commercial_config.get("panels", [])
    if not panels_config:
        logger.warning("No commercial panels configured")
        return pd.DataFrame()

    all_dataframes = []

    for panel_config in panels_config:
        panel_name = panel_config.get("name", "Unknown_Panel")
        file_path = panel_config.get("file_path")

        if not file_path:
            logger.warning(f"No file path specified for panel {panel_name}")
            continue

        logger.info(f"Processing commercial panel: {panel_name}")

        try:
            df = process_commercial_panel(panel_config)
            if df is not None and not df.empty:
                all_dataframes.append(df)
                logger.info(f"Successfully processed {len(df)} genes from {panel_name}")
            else:
                logger.warning(f"No genes extracted from {panel_name}")
        except Exception as e:
            logger.error(f"Error processing panel {panel_name}: {e}")
            continue

    # Combine all dataframes
    if all_dataframes:
        combined_df = pd.concat(all_dataframes, ignore_index=True)
        logger.info(
            f"Fetched {len(combined_df)} total gene records from commercial panels"
        )
        return combined_df
    else:
        logger.warning("No commercial panel data was successfully processed")
        return pd.DataFrame()


def process_commercial_panel(panel_config: dict[str, Any]) -> pd.DataFrame | None:
    """
    Process a single commercial panel JSON file.

    Args:
        panel_config: Panel configuration dictionary

    Returns:
        Standardized DataFrame or None if processing failed
    """
    panel_name = panel_config.get("name", "Unknown_Panel")
    file_path_str = panel_config.get("file_path")
    evidence_score = panel_config.get("evidence_score", 1.0)
    category = panel_config.get("category", "germline")  # Default to germline

    if not file_path_str:
        logger.error(f"No file path specified for panel: {panel_name}")
        return None

    # Validate file path
    file_path = Path(file_path_str)
    if not file_path.exists():
        logger.error(f"JSON file not found: {file_path}")
        return None

    # Read JSON file
    try:
        panel_data = read_panel_json(file_path)
    except Exception as e:
        logger.error(f"Error reading JSON file {file_path}: {e}")
        return None

    if not panel_data:
        logger.warning(f"No valid data found in {file_path}")
        return None

    # Extract genes from JSON
    genes = panel_data.get("genes", [])
    if not genes:
        logger.warning(f"No genes found in {file_path}")
        return None

    # Validate genes
    valid_genes = validate_and_clean_genes(genes)
    if not valid_genes:
        logger.warning(f"No valid genes found in {file_path}")
        return None

    # Create source details with metadata
    source_url = panel_data.get("source_url", "Unknown")
    retrieval_date = panel_data.get("retrieval_date", "Unknown")
    source_detail = f"URL:{source_url}|Date:{retrieval_date}|Category:{category}"

    # Create standardized dataframe
    evidence_scores = [evidence_score] * len(valid_genes)
    source_details = [source_detail] * len(valid_genes)

    df = create_standard_dataframe(
        genes=valid_genes,
        source_name=panel_name,
        evidence_scores=evidence_scores,
        source_details=source_details,
        gene_names_reported=valid_genes,
    )

    # Add temporary category column for use by the merger
    df["category"] = category

    return df


def read_panel_json(file_path: Path) -> dict[str, Any] | None:
    """
    Read and validate a commercial panel JSON file.

    Args:
        file_path: Path to JSON file

    Returns:
        Panel data dictionary or None if invalid
    """
    try:
        with open(file_path, encoding="utf-8") as f:
            data = json.load(f)

        # Validate required fields
        required_fields = ["panel_name", "source_url", "retrieval_date", "genes"]
        for field in required_fields:
            if field not in data:
                logger.error(f"Missing required field '{field}' in {file_path}")
                return None

        # Validate data types
        if not isinstance(data["genes"], list):
            logger.error(f"Field 'genes' must be a list in {file_path}")
            return None

        logger.debug(
            f"Read JSON file {file_path} with {len(data['genes'])} genes "
            f"from {data['panel_name']} (retrieved {data['retrieval_date']})"
        )
        return data
    except json.JSONDecodeError as e:
        logger.error(f"Invalid JSON in file {file_path}: {e}")
        return None
    except Exception as e:
        logger.error(f"Error reading JSON file {file_path}: {e}")
        return None


def validate_and_clean_genes(genes: list[str]) -> list[str]:
    """
    Validate and clean gene symbols from scraped data.

    Args:
        genes: List of raw gene symbols

    Returns:
        List of cleaned and validated gene symbols
    """
    valid_genes = []
    seen = set()

    for gene in genes:
        if not isinstance(gene, str):
            continue

        # Clean the gene symbol
        cleaned_gene = clean_gene_symbol(gene)

        # Validate and add if valid
        if (
            cleaned_gene
            and validate_gene_symbol(cleaned_gene)
            and cleaned_gene not in seen
        ):
            valid_genes.append(cleaned_gene)
            seen.add(cleaned_gene)

    return valid_genes


def clean_gene_symbol(gene: str) -> str:
    """
    Clean and standardize a gene symbol.

    Args:
        gene: Raw gene symbol string

    Returns:
        Cleaned gene symbol
    """
    if not gene:
        return ""

    # Remove common artifacts
    gene = gene.strip()
    gene = gene.replace("*", "")  # Remove asterisks
    gene = gene.split("(")[0].strip()  # Remove parenthetical content
    gene = gene.split(",")[0].strip()  # Take first gene if comma-separated
    gene = gene.split(";")[0].strip()  # Take first gene if semicolon-separated

    # Remove common prefixes/suffixes that might be present
    gene = gene.replace("Gene:", "").strip()
    gene = gene.replace("GENE:", "").strip()

    # Remove quotes
    gene = gene.strip("\"'")

    # Convert to uppercase for consistency
    return gene.upper()


def validate_gene_symbol(gene: str) -> bool:
    """
    Validate that a string looks like a valid gene symbol.

    Args:
        gene: Gene symbol to validate

    Returns:
        True if the gene symbol appears valid
    """
    if not gene:
        return False

    # Basic validation: should be alphanumeric with possible hyphens/underscores
    # and between 1-20 characters
    if len(gene) < 1 or len(gene) > 20:
        return False

    # Should contain at least one letter
    if not any(c.isalpha() for c in gene):
        return False

    # Should only contain valid characters
    valid_chars = set("ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-_")
    if not all(c in valid_chars for c in gene):
        return False

    # Skip common non-gene terms
    skip_terms = {
        "GENE",
        "GENES",
        "PANEL",
        "TEST",
        "ANALYSIS",
        "SEQUENCING",
        "DNA",
        "RNA",
        "EXOME",
        "GENOME",
        "VARIANT",
        "MUTATION",
        "UNKNOWN",
        "N/A",
        "NA",
        "NULL",
        "NONE",
        "",
    }
    if gene in skip_terms:
        return False

    return True


def validate_commercial_panel_config(panel_config: dict[str, Any]) -> list[str]:
    """
    Validate commercial panel configuration.

    Args:
        panel_config: Panel configuration dictionary

    Returns:
        List of validation errors (empty if valid)
    """
    errors = []

    # Check required fields
    if not panel_config.get("name"):
        errors.append("Panel name is required")

    if not panel_config.get("file_path"):
        errors.append("File path is required")

    # Check file existence
    file_path = panel_config.get("file_path")
    if file_path and not Path(file_path).exists():
        errors.append(f"JSON file not found: {file_path}")
    elif file_path:
        # Validate JSON structure
        try:
            data = read_panel_json(Path(file_path))
            if not data:
                errors.append(f"Invalid JSON structure in {file_path}")
        except Exception as e:
            errors.append(f"Error reading JSON file: {e}")

    # Check evidence score
    evidence_score = panel_config.get("evidence_score", 1.0)
    if not isinstance(evidence_score, int | float) or evidence_score < 0:
        errors.append("Evidence score must be a non-negative number")

    # Check category
    category = panel_config.get("category", "germline")
    if category not in ["germline", "somatic"]:
        errors.append("Category must be either 'germline' or 'somatic'")

    return errors


def get_commercial_panel_summary(config: dict[str, Any]) -> dict[str, Any]:
    """
    Get summary information about configured commercial panels.

    Args:
        config: Configuration dictionary

    Returns:
        Summary dictionary
    """
    config_manager = ConfigManager(config)
    commercial_config = config_manager.get_source_config("Commercial_Panels")
    panels_config = commercial_config.get("panels", [])

    summary = {
        "enabled": commercial_config.get("enabled", True),
        "total_panels": len(panels_config),
        "panels": [],
    }

    for panel_config in panels_config:
        file_path = panel_config.get("file_path", "")
        file_exists = Path(file_path).exists() if file_path else False

        panel_summary = {
            "name": panel_config.get("name", "Unknown"),
            "file_path": file_path,
            "evidence_score": panel_config.get("evidence_score", 1.0),
            "file_exists": file_exists,
            "validation_errors": validate_commercial_panel_config(panel_config),
        }

        # Add gene count if file exists and is valid
        if file_exists:
            try:
                data = read_panel_json(Path(file_path))
                if data:
                    panel_summary["gene_count"] = len(data.get("genes", []))
                    panel_summary["retrieval_date"] = data.get(
                        "retrieval_date", "Unknown"
                    )
                    panel_summary["source_url"] = data.get("source_url", "Unknown")
            except Exception:
                panel_summary["gene_count"] = 0

        summary["panels"].append(panel_summary)

    return summary
