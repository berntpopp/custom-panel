<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gene Panel Report</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            margin: 0;
            padding: 20px;
            background-color: #f5f5f5;
            line-height: 1.6;
        }
        .container {
            max-width: 1400px;
            margin: 0 auto;
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            overflow: hidden;
        }
        .header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 30px;
            text-align: center;
        }
        .header h1 {
            margin: 0;
            font-size: 2.5em;
            font-weight: 300;
        }
        .header p {
            margin: 10px 0 0;
            font-size: 1.1em;
            opacity: 0.9;
        }
        .content {
            padding: 30px;
        }
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        .stat-card {
            background: #f8f9fa;
            border: 1px solid #e9ecef;
            border-radius: 6px;
            padding: 20px;
            text-align: center;
        }
        .stat-number {
            font-size: 2em;
            font-weight: bold;
            color: #495057;
            margin-bottom: 5px;
        }
        .stat-label {
            color: #6c757d;
            font-size: 0.9em;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }
        .section {
            margin-bottom: 40px;
        }
        .section h2 {
            color: #495057;
            border-bottom: 2px solid #e9ecef;
            padding-bottom: 10px;
            margin-bottom: 20px;
        }
        .top-genes {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 10px;
            margin-bottom: 20px;
        }
        .gene-card {
            background: #fff;
            border: 1px solid #dee2e6;
            border-radius: 4px;
            padding: 10px;
            text-align: center;
        }
        .gene-name {
            font-weight: bold;
            color: #495057;
        }
        .gene-score {
            color: #6c757d;
            font-size: 0.9em;
        }
        #geneTable {
            margin-top: 20px;
        }
        .dataTables_wrapper .dataTables_length select,
        .dataTables_wrapper .dataTables_filter input {
            border: 1px solid #ced4da;
            border-radius: 4px;
            padding: 8px 12px;
            width: 300px;
            font-size: 14px;
        }
        .dataTables_wrapper .dataTables_filter {
            margin-bottom: 10px;
        }
        .dataTables_wrapper .dataTables_filter label {
            font-weight: 500;
            color: #495057;
            margin-right: 10px;
        }
        .dataTables_wrapper .dataTables_paginate .paginate_button {
            border: 1px solid #dee2e6;
            margin: 0 2px;
            padding: 6px 12px;
            border-radius: 4px;
        }
        .dataTables_wrapper .dataTables_paginate .paginate_button.current {
            background: #007bff;
            color: white !important;
            border-color: #007bff;
        }
        table.dataTable {
            border-collapse: collapse;
            width: 100%;
        }
        table.dataTable th,
        table.dataTable td {
            border: 1px solid #dee2e6;
            padding: 8px 12px;
        }
        table.dataTable thead th {
            background-color: #f8f9fa;
            font-weight: 600;
            color: #495057;
        }
        table.dataTable tbody tr:nth-child(even) {
            background-color: #f8f9fa;
        }
        table.dataTable tbody tr:hover {
            background-color: #e3f2fd;
        }
        .score-high { color: #28a745; font-weight: bold; }
        .score-medium { color: #ffc107; font-weight: bold; }
        .score-low { color: #dc3545; font-weight: bold; }
        .include-yes { color: #28a745; font-weight: bold; }
        .include-no { color: #6c757d; }
        .chart-container {
            position: relative;
            height: 400px;
            margin-bottom: 30px;
        }
        .charts-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(500px, 1fr));
            gap: 30px;
            margin-bottom: 40px;
        }
        .chart-card {
            background: #fff;
            border: 1px solid #dee2e6;
            border-radius: 6px;
            padding: 20px;
        }
        .chart-title {
            font-size: 1.2em;
            font-weight: 600;
            color: #495057;
            margin-bottom: 15px;
            text-align: center;
        }
        .tooltip-cell {
            cursor: help;
            position: relative;
        }
        .tooltip-cell:hover {
            background-color: #e3f2fd !important;
        }
        .column-toggle {
            display: inline-flex;
            align-items: center;
            gap: 5px;
            padding: 5px 10px;
            background: white;
            border: 1px solid #dee2e6;
            border-radius: 4px;
            font-size: 0.9em;
        }
        .column-toggle input[type="checkbox"] {
            margin: 0;
        }
        .column-toggle label {
            margin: 0;
            cursor: pointer;
            user-select: none;
        }
        .gene-link {
            text-decoration: none !important;
            color: #007bff !important;
            font-weight: 500 !important;
            transition: color 0.2s ease;
        }
        .gene-link:hover {
            color: #0056b3 !important;
            text-decoration: underline !important;
        }
        .gene-link:visited {
            color: #6f42c1 !important;
        }
        .download-container {
            display: flex;
            gap: 10px;
            margin-bottom: 15px;
            align-items: center;
        }
        .download-btn {
            background: linear-gradient(135deg, #28a745, #20c997);
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 6px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            display: inline-flex;
            align-items: center;
            gap: 8px;
            transition: all 0.3s ease;
            text-decoration: none;
            box-shadow: 0 2px 4px rgba(40, 167, 69, 0.2);
        }
        .download-btn:hover {
            background: linear-gradient(135deg, #218838, #1fa187);
            transform: translateY(-1px);
            box-shadow: 0 4px 8px rgba(40, 167, 69, 0.3);
        }
        .download-btn:active {
            transform: translateY(0);
            box-shadow: 0 2px 4px rgba(40, 167, 69, 0.2);
        }
        .download-btn svg {
            width: 16px;
            height: 16px;
        }
        .download-section-title {
            margin: 0;
            color: #495057;
            font-size: 14px;
            font-weight: 500;
        }
        .gene-tabs {
            margin-bottom: 20px;
        }
        .gene-tab-button {
            padding: 10px 20px;
            border: none;
            cursor: pointer;
            border-radius: 6px 6px 0 0;
            font-weight: 500;
            font-size: 14px;
            margin-left: 2px;
            transition: all 0.3s ease;
            display: inline-flex;
            align-items: center;
            gap: 5px;
        }
        .gene-tab-button.active {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(102, 126, 234, 0.3);
        }
        .gene-tab-button:not(.active) {
            background: #f8f9fa;
            color: #495057;
        }
        .gene-tab-button:not(.active):hover {
            background: #e9ecef;
            transform: translateY(-1px);
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }
        .gene-tab-button.panel-tab {
            background: linear-gradient(135deg, #28a745, #20c997);
            color: white;
            font-weight: 600;
        }
        .gene-tab-button.panel-tab:not(.active) {
            background: linear-gradient(135deg, #28a745, #20c997);
            color: white;
            opacity: 0.8;
        }
        .gene-tab-button.panel-tab:not(.active):hover {
            background: linear-gradient(135deg, #218838, #1fa187);
            opacity: 1;
            transform: translateY(-1px);
            box-shadow: 0 2px 4px rgba(40, 167, 69, 0.3);
        }
        .gene-tab-button.panel-tab.active {
            background: linear-gradient(135deg, #218838, #1fa187);
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(40, 167, 69, 0.4);
        }
        .gene-table-container {
            display: none;
        }
        .gene-table-container.active {
            display: block;
        }
        .multi-source-badge {
            display: inline-block;
            background: linear-gradient(135deg, #17a2b8, #138496);
            color: white;
            font-size: 10px;
            font-weight: bold;
            padding: 2px 6px;
            border-radius: 12px;
            margin-left: 5px;
            cursor: help;
            min-width: 16px;
            text-align: center;
            line-height: 1.2;
            box-shadow: 0 1px 3px rgba(23, 162, 184, 0.3);
        }
        .multi-source-badge:hover {
            background: linear-gradient(135deg, #138496, #117a8b);
            transform: scale(1.05);
        }
        .column-toggle {
            display: inline-flex;
            align-items: center;
            gap: 5px;
            margin: 3px;
            padding: 5px 10px;
            background: white;
            border: 1px solid #d0d7de;
            border-radius: 4px;
            font-size: 12px;
            cursor: pointer;
        }
        .column-toggle:hover {
            background: #f6f8fa;
            border-color: #0969da;
        }
        .column-toggle input[type="checkbox"] {
            margin: 0;
            cursor: pointer;
        }
        .column-toggle label {
            cursor: pointer;
            margin: 0;
            user-select: none;
        }
    </style>
    <!-- DataTables CSS -->
    <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/1.13.7/css/jquery.dataTables.min.css">
    <!-- Chart.js for interactive charts -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <!-- jQuery and DataTables JS -->
    <script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
    <script src="https://cdn.datatables.net/1.13.7/js/jquery.dataTables.min.js"></script>
    <!-- SheetJS for Excel export -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>Gene Panel Report</h1>
            <p>Generated on {{ generation_date }}</p>
        </div>

        <div class="content">
            <!-- Summary Statistics -->
            <div class="section">
                <h2>Summary Statistics</h2>
                <div class="stats-grid">
                    <div class="stat-card">
                        <div class="stat-number">{{ "{:,}".format(total_genes) }}</div>
                        <div class="stat-label">Total Genes</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number">{{ "{:,}".format(included_count) }}</div>
                        <div class="stat-label">Panel Genes</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number">{{ "{:,}".format(annotated_count) }}</div>
                        <div class="stat-label">With Coordinates</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number">{{ "{:,}".format(mane_select_count) }}</div>
                        <div class="stat-label">MANE Select</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number">{{ "{:,}".format(mane_clinical_count) }}</div>
                        <div class="stat-label">MANE Clinical</div>
                    </div>
                </div>
            </div>

            <!-- Source Statistics -->
            <div class="section">
                <h2>Data Source Analysis</h2>
                <div class="stats-grid">
                    <div class="stat-card">
                        <div class="stat-number">{{ total_unique_sources }}</div>
                        <div class="stat-label">Unique Sources</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number">{{ avg_sources_per_gene }}</div>
                        <div class="stat-label">Avg Sources/Gene</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number">{{ max_sources_per_gene }}</div>
                        <div class="stat-label">Max Sources/Gene</div>
                    </div>
                </div>

                <!-- Source Details Table -->
                <div style="margin-top: 20px;">
                    <h3 style="color: #495057; margin-bottom: 15px;">Source Contributions</h3>
                    <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 15px;">
                        {% for source in source_stats %}
                        <div style="background: #f8f9fa; border: 1px solid #e9ecef; border-radius: 6px; padding: 15px;">
                            <div style="display: flex; justify-content: space-between; align-items: center;">
                                <span style="font-weight: 600; color: #495057;">{{ source.name }}</span>
                                <span style="color: #6c757d; font-size: 0.9em;">{{ "%.1f"|format(source.percentage) }}%</span>
                            </div>
                            <div style="margin-top: 8px;">
                                <div style="background: #e9ecef; border-radius: 3px; height: 8px; overflow: hidden;">
                                    <div style="background: #667eea; width: {{ source.percentage }}%; height: 100%;"></div>
                                </div>
                            </div>
                            <div style="margin-top: 8px; color: #6c757d; font-size: 0.85em;">
                                {{ source.gene_count }} genes
                            </div>
                        </div>
                        {% endfor %}
                    </div>
                    {% if source_stats|length > 12 %}
                    <p style="margin-top: 10px; color: #6c757d; font-size: 0.9em;">Showing top 12 of {{ source_stats|length }} sources</p>
                    {% endif %}
                </div>
            </div>

            <!-- Interactive Charts -->
            <div class="section">
                <h2>Data Visualizations</h2>
                <div class="charts-grid">
                    <div class="chart-card">
                        <div class="chart-title">Score Distribution</div>
                        <div class="chart-container">
                            <canvas id="scoreChart"></canvas>
                        </div>
                    </div>
                    <div class="chart-card">
                        <div class="chart-title">Gene Size Distribution</div>
                        <div class="chart-container">
                            <canvas id="geneSizeChart"></canvas>
                        </div>
                    </div>
                    <div class="chart-card">
                        <div class="chart-title">Source Count Distribution</div>
                        <div class="chart-container">
                            <canvas id="sourceCountChart"></canvas>
                        </div>
                    </div>
                    <div class="chart-card">
                        <div class="chart-title">Transcript Size Distribution</div>
                        <div class="chart-container">
                            <canvas id="transcriptSizeChart"></canvas>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Gene Data Table -->
            <div class="section">
                <h2>Gene Data Table</h2>
                <p>Interactive table showing all genes with sorting, filtering, and search capabilities. Use the search box to find genes by name, score values, source information, inclusion reasons, or any other field data.</p>

                <!-- Gene Source Tabs -->
                <div class="gene-tabs">
                    <div style="border-bottom: 2px solid #e9ecef;">
                        <div style="display: flex; gap: 0; flex-wrap: wrap;">
                            <button class="gene-tab-button active" data-table="all_genes">
                                All Genes ({{ "{:,}".format(gene_source_stats.all_genes) }})
                            </button>
                            {% if gene_source_stats.panel_genes %}
                            <button class="gene-tab-button panel-tab" data-table="panel_genes">
                                Panel Genes ({{ "{:,}".format(gene_source_stats.panel_genes) }})
                            </button>
                            {% endif %}
                            {% for source in source_stats %}
                            {% set source_key = "genes_" + source.name.lower().replace(' ', '_').replace('-', '_') %}
                            {% if gene_source_stats[source_key] %}
                            <button class="gene-tab-button" data-table="{{ source_key }}">
                                {{ source.name }} ({{ "{:,}".format(gene_source_stats[source_key]) }})
                            </button>
                            {% endif %}
                            {% endfor %}
                        </div>
                    </div>
                </div>

                <!-- Download Controls -->
                <div class="download-container">
                    <span class="download-section-title">Download:</span>
                    <button class="download-btn" onclick="downloadAllGenesTable()">
                        <svg viewBox="0 0 24 24" fill="currentColor">
                            <path d="M14,2H6A2,2 0 0,0 4,4V20A2,2 0 0,0 6,22H18A2,2 0 0,0 20,20V8L14,2M18,20H6V4H13V9H18V20Z"/>
                        </svg>
                        All Genes (Excel)
                    </button>
                    <button class="download-btn" onclick="downloadCurrentGeneSourceTable()">
                        <svg viewBox="0 0 24 24" fill="currentColor">
                            <path d="M14,2H6A2,2 0 0,0 4,4V20A2,2 0 0,0 6,22H18A2,2 0 0,0 20,20V8L14,2M18,20H6V4H13V9H18V20Z"/>
                        </svg>
                        Current Tab (Excel)
                    </button>
                </div>

                <!-- Column Toggle Controls -->
                <div class="column-toggles" style="margin-bottom: 15px; padding: 10px; background: #f8f9fa; border-radius: 6px;">
                    <h4 style="margin: 0 0 10px 0; color: #495057;">Toggle Columns:</h4>
                    <div id="columnToggles" style="display: flex; flex-wrap: wrap; gap: 10px;"></div>
                </div>

                <!-- Gene Tables Container -->
                <div id="geneTablesContainer">
                    <!-- Tables will be dynamically generated here -->
                </div>
            </div>

            {% if has_snp_data %}
            <!-- SNP Analysis Section -->
            <div class="section">
                <h2>SNP Analysis</h2>
                <div class="stats-grid">
                    <div class="stat-card">
                        <div class="stat-number">{{ "{:,}".format(snp_stats.total_snps) }}</div>
                        <div class="stat-label">Total SNPs</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number">{{ snp_stats.snp_types }}</div>
                        <div class="stat-label">SNP Categories</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number">{{ "{:,}".format(snp_stats.annotated_snps) }}</div>
                        <div class="stat-label">With Coordinates</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number">{{ snp_stats.annotation_rate }}</div>
                        <div class="stat-label">Annotation Rate</div>
                    </div>
                </div>

                <!-- SNP Type Breakdown -->
                <div style="margin-top: 20px;">
                    <h3 style="color: #495057; margin-bottom: 15px;">SNP Categories</h3>
                    <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 15px;">
                        {% for snp_type, count in snp_stats.snp_type_counts.items() %}
                        <div style="background: #f8f9fa; border: 1px solid #e9ecef; border-radius: 6px; padding: 15px;">
                            <div style="display: flex; justify-content: space-between; align-items: center;">
                                <span style="font-weight: 600; color: #495057;">{{ snp_type.replace('_', ' ').title() }}</span>
                                <span style="color: #6c757d; font-size: 0.9em;">{{ "{:,}".format(count) }} SNPs</span>
                            </div>
                            <div style="margin-top: 8px;">
                                <div style="background: #e9ecef; border-radius: 3px; height: 8px; overflow: hidden;">
                                    <div style="background: #28a745; width: {{ (count / snp_stats.total_snps * 100)|round(1) }}%; height: 100%;"></div>
                                </div>
                            </div>
                            <div style="margin-top: 8px; color: #6c757d; font-size: 0.85em;">
                                {{ "{:.1f}%".format(count / snp_stats.total_snps * 100) }} of total
                            </div>
                        </div>
                        {% endfor %}
                    </div>
                </div>

                <!-- SNP Data Tables -->
                <div style="margin-top: 30px;">
                    <h3 style="color: #495057; margin-bottom: 15px;">SNP Data Tables</h3>
                    
                    <!-- Download Controls -->
                    <div class="download-container">
                        <span class="download-section-title">Download:</span>
                        <button class="download-btn" onclick="downloadAllSNPTable()">
                            <svg viewBox="0 0 24 24" fill="currentColor">
                                <path d="M14,2H6A2,2 0 0,0 4,4V20A2,2 0 0,0 6,22H18A2,2 0 0,0 20,20V8L14,2M18,20H6V4H13V9H18V20Z"/>
                            </svg>
                            All SNPs (Excel)
                        </button>
                        <button class="download-btn" onclick="downloadCurrentSNPTable()">
                            <svg viewBox="0 0 24 24" fill="currentColor">
                                <path d="M14,2H6A2,2 0 0,0 4,4V20A2,2 0 0,0 6,22H18A2,2 0 0,0 20,20V8L14,2M18,20H6V4H13V9H18V20Z"/>
                            </svg>
                            Current Tab (Excel)
                        </button>
                    </div>
                    
                    <!-- Tab Navigation -->
                    <div class="snp-tabs" style="margin-bottom: 20px;">
                        <div style="border-bottom: 2px solid #e9ecef;">
                            <div style="display: flex; gap: 0;">
                                <button class="snp-tab-button active" data-table="all_snps" style="padding: 10px 20px; border: none; background: #667eea; color: white; cursor: pointer; border-radius: 6px 6px 0 0; font-weight: 500;">
                                    All SNPs ({{ "{:,}".format(snp_stats.total_snps) }})
                                </button>
                                {% for snp_type, count in snp_stats.snp_type_counts.items() %}
                                <button class="snp-tab-button" data-table="snps_{{ snp_type }}" style="padding: 10px 20px; border: none; background: #f8f9fa; color: #495057; cursor: pointer; border-radius: 6px 6px 0 0; margin-left: 2px; font-weight: 500;">
                                    {{ snp_type.replace('_', ' ').title() }} ({{ "{:,}".format(count) }})
                                </button>
                                {% endfor %}
                            </div>
                        </div>
                    </div>

                    <!-- SNP Tables Container -->
                    <div id="snpTablesContainer">
                        <!-- Tables will be dynamically generated here -->
                    </div>
                </div>
            </div>
            {% endif %}

            {% if has_regions_data %}
            <!-- Regions Analysis Section -->
            <div class="section">
                <h2>Regions Analysis</h2>
                
                <!-- Regions Statistics -->
                <div class="stats-grid">
                    <div class="stat-card">
                        <div class="stat-number">{{ "{:,}".format(regions_stats.total_regions) }}</div>
                        <div class="stat-label">Total Regions</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number">{{ regions_stats.region_types }}</div>
                        <div class="stat-label">Region Types</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number">{{ regions_stats.total_mb }}</div>
                        <div class="stat-label">Total Coverage (MB)</div>
                    </div>
                </div>

                <!-- Region Type Breakdown -->
                <div style="background: #f8f9fa; border-radius: 6px; padding: 20px; margin-bottom: 30px;">
                    <h3 style="color: #495057; margin-bottom: 15px;">Region Categories</h3>
                    <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px;">
                        {% for region_type, count in regions_stats.region_type_counts.items() %}
                        <div style="background: white; border-radius: 4px; padding: 15px; border-left: 4px solid #667eea;">
                            <div style="display: flex; justify-content: space-between; align-items: center;">
                                <span style="font-weight: 500; color: #495057; text-transform: capitalize;">{{ region_type.replace('_', ' ') }}</span>
                                <span style="color: #6c757d; font-size: 0.9em;">{{ "{:,}".format(count) }} regions</span>
                            </div>
                        </div>
                        {% endfor %}
                    </div>
                </div>

                <!-- Regions Data Tables -->
                <div style="margin-top: 30px;">
                    <h3 style="color: #495057; margin-bottom: 15px;">Regions Data Tables</h3>
                    
                    <!-- Download Controls -->
                    <div class="download-container">
                        <span class="download-section-title">Download:</span>
                        <button class="download-btn" onclick="downloadAllRegionsTable()">
                            <svg viewBox="0 0 24 24" fill="currentColor">
                                <path d="M14,2H6A2,2 0 0,0 4,4V20A2,2 0 0,0 6,22H18A2,2 0 0,0 20,20V8L14,2M18,20H6V4H13V9H18V20Z"/>
                            </svg>
                            All Regions (Excel)
                        </button>
                        <button class="download-btn" onclick="downloadCurrentRegionsTable()">
                            <svg viewBox="0 0 24 24" fill="currentColor">
                                <path d="M14,2H6A2,2 0 0,0 4,4V20A2,2 0 0,0 6,22H18A2,2 0 0,0 20,20V8L14,2M18,20H6V4H13V9H18V20Z"/>
                            </svg>
                            Current Tab (Excel)
                        </button>
                    </div>
                    
                    <!-- Tab Navigation -->
                    <div class="regions-tabs" style="margin-bottom: 20px;">
                        <div style="border-bottom: 2px solid #e9ecef;">
                            <div style="display: flex; gap: 0;">
                                <button class="regions-tab-button active" data-table="all_regions" style="padding: 10px 20px; border: none; background: #667eea; color: white; cursor: pointer; border-radius: 6px 6px 0 0; font-weight: 500;">
                                    All Regions ({{ "{:,}".format(regions_stats.total_regions) }})
                                </button>
                                {% for region_type, count in regions_stats.region_type_counts.items() %}
                                <button class="regions-tab-button" data-table="{{ region_type }}" style="padding: 10px 20px; border: none; background: #f8f9fa; color: #495057; cursor: pointer; border-radius: 6px 6px 0 0; margin-left: 2px; font-weight: 500;">
                                    {{ region_type.replace('_', ' ').title() }} ({{ "{:,}".format(count) }})
                                </button>
                                {% endfor %}
                            </div>
                        </div>
                    </div>

                    <!-- Regions Tables Container -->
                    <div id="regionsTablesContainer">
                        <!-- Tables will be dynamically generated here -->
                    </div>
                </div>
            </div>
            {% endif %}
        </div>
    </div>

    <script>
        // Global variables for data
        var geneData = {{ table_data|safe }};
        var chartData = {{ chart_data|safe }};
        var availableColumns = {{ available_columns|safe }};
        var defaultVisible = {{ default_visible|safe }};
        var geneSourceData = {{ gene_source_data|safe }};
        
        {% if has_snp_data %}
        var snpTableData = {{ snp_table_data|safe }};
        {% endif %}
        
        {% if has_regions_data %}
        var regionsTableData = {{ regions_table_data|safe }};
        {% endif %}

        $(document).ready(function() {
            // Initialize gene source tables
            initializeGeneSourceTables(geneSourceData, availableColumns, defaultVisible);

            {% if has_snp_data %}
            // Initialize SNP tables
            initializeSNPTables(snpTableData);
            {% endif %}

            {% if has_regions_data %}
            // Initialize regions tables
            initializeRegionsTables(regionsTableData);
            {% endif %}

            // Create interactive charts
            createCharts(chartData);
        });

        function initializeTable(geneData, availableColumns, defaultVisible) {
            // Column configuration
            var columnConfig = {
                'approved_symbol': {
                    title: 'Gene Symbol',
                    render: function(data, type, row) {
                        if (type === 'display') {
                            var hgncId = row.hgnc_id_tooltip || '';
                            var tooltipText = hgncId ? 'HGNC ID: ' + hgncId : 'No HGNC ID';

                            // Use direct HGNC ID URL if available, otherwise fallback to search
                            var hgncUrl;
                            if (hgncId && hgncId.startsWith('HGNC:')) {
                                hgncUrl = 'https://www.genenames.org/data/gene-symbol-report/#!/hgnc_id/' + hgncId;
                                tooltipText += ' (Click to view gene report)';
                            } else {
                                hgncUrl = 'https://www.genenames.org/tools/search/#!/?query=' + encodeURIComponent(data);
                                tooltipText += ' (Click to search in HGNC)';
                            }

                            return '<a href="' + hgncUrl + '" target="_blank" class="tooltip-cell gene-link" title="' + tooltipText + '">' + data + '</a>';
                        }
                        return data;
                    }
                },
                'hgnc_id': { title: 'HGNC ID' },
                'gene_size': {
                    title: 'Gene Size (bp)',
                    render: function(data, type, row) {
                        if (type === 'display' && data !== null) {
                            return parseInt(data).toLocaleString();
                        }
                        return data;
                    }
                },
                'chromosome': { title: 'Chromosome' },
                'gene_start': {
                    title: 'Start',
                    render: function(data, type, row) {
                        if (type === 'display' && data !== null) {
                            return parseInt(data).toLocaleString();
                        }
                        return data;
                    }
                },
                'gene_end': {
                    title: 'End',
                    render: function(data, type, row) {
                        if (type === 'display' && data !== null) {
                            return parseInt(data).toLocaleString();
                        }
                        return data;
                    }
                },
                'biotype': { title: 'Biotype' },
                'gene_description': { title: 'Description' },
                'canonical_transcript_coverage': {
                    title: 'Canonical Coverage (bp)',
                    render: function(data, type, row) {
                        if (type === 'display' && data !== null) {
                            return parseInt(data).toLocaleString();
                        }
                        return data;
                    }
                },
                'mane_select_coverage': {
                    title: 'MANE Select Coverage (bp)',
                    render: function(data, type, row) {
                        if (type === 'display' && data !== null) {
                            return parseInt(data).toLocaleString();
                        }
                        return data;
                    }
                },
                'mane_clinical_coverage': {
                    title: 'MANE Clinical Coverage (bp)',
                    render: function(data, type, row) {
                        if (type === 'display' && data !== null) {
                            return parseInt(data).toLocaleString();
                        }
                        return data;
                    }
                },
                'source_count': {
                    title: 'Sources',
                    render: function(data, type, row) {
                        if (type === 'display') {
                            var sourceNames = row.source_names_tooltip || 'No source details';
                            return '<span class="tooltip-cell" title="' + sourceNames + '">' + data + '</span>';
                        }
                        return data;
                    }
                },
                'score': {
                    title: 'Score',
                    render: function(data, type, row) {
                        if (type === 'display' && data !== null && data !== undefined) {
                            var scoreClass = data >= 3 ? 'score-high' : data >= 1.5 ? 'score-medium' : 'score-low';
                            return '<span class="' + scoreClass + '">' + parseFloat(data).toFixed(2) + '</span>';
                        }
                        return data;
                    }
                },
                'include': {
                    title: 'Included',
                    render: function(data, type, row) {
                        if (type === 'display') {
                            var includeClass = data ? 'include-yes' : 'include-no';
                            var includeText = data ? 'Yes' : 'No';
                            return '<span class="' + includeClass + '">' + includeText + '</span>';
                        }
                        return data;
                    }
                },
                'veto_reasons': {
                    title: 'Veto Reasons',
                    render: function(data, type, row) {
                        if (type === 'display' && data) {
                            return '<span class="tooltip-cell" title="' + data + '" style="color: #e83e8c; font-weight: 500;">Veto Applied</span>';
                        }
                        return data || '';
                    }
                },
                'inclusion_reason': {
                    title: 'Inclusion Reason',
                    render: function(data, type, row) {
                        if (type === 'display') {
                            var reasonClass = '';
                            var displayText = '';
                            if (data === 'veto') {
                                reasonClass = 'style="color: #e83e8c; font-weight: 500;"';
                                displayText = 'Veto Override';
                            } else if (data === 'threshold+veto') {
                                reasonClass = 'style="color: #6f42c1; font-weight: 500;"';
                                displayText = 'Threshold + Veto';
                            } else {
                                reasonClass = 'style="color: #28a745;"';
                                displayText = 'Score Threshold';
                            }
                            return '<span ' + reasonClass + '>' + displayText + '</span>';
                        }
                        return data;
                    }
                }
            };

            // Create column toggles
            var togglesContainer = $('#columnToggles');
            availableColumns.forEach(function(col) {
                var isVisible = defaultVisible.includes(col);
                var displayName = columnConfig[col] ? columnConfig[col].title : col.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase());

                var toggleHtml = '<div class="column-toggle">' +
                    '<input type="checkbox" id="toggle_' + col + '" ' + (isVisible ? 'checked' : '') + '>' +
                    '<label for="toggle_' + col + '">' + displayName + '</label>' +
                    '</div>';
                togglesContainer.append(toggleHtml);
            });

            // Build initial columns
            var columns = buildColumns(availableColumns, defaultVisible, columnConfig);

            // Initialize DataTable
            var table = $('#geneTable').DataTable({
                data: geneData,
                columns: columns,
                pageLength: 25,
                lengthMenu: [[10, 25, 50, 100, -1], [10, 25, 50, 100, "All"]],
                order: [[columns.findIndex(col => col.data === 'score'), 'desc']],
                responsive: true,
                autoWidth: false,
                scrollX: true,
                processing: true,
                language: {
                    processing: "Loading gene data...",
                    search: "Search all fields:",
                    searchPlaceholder: "Gene names, scores, sources, reasons, etc.",
                    lengthMenu: "Show _MENU_ genes per page",
                    info: "Showing _START_ to _END_ of _TOTAL_ genes",
                    infoEmpty: "Showing 0 to 0 of 0 genes",
                    infoFiltered: "(filtered from _MAX_ total genes)",
                    paginate: {
                        first: "First",
                        last: "Last",
                        next: "Next",
                        previous: "Previous"
                    }
                }
            });

            // Enhanced search functionality - add placeholder text to search input
            setTimeout(function() {
                $('div.dataTables_filter input').attr('placeholder', 'Gene names, scores, sources, reasons, etc.');
                $('div.dataTables_filter input').addClass('form-control');
            }, 100);

            // Add toggle event listeners
            availableColumns.forEach(function(col) {
                $('#toggle_' + col).on('change', function() {
                    var column = table.column(col + ':name');
                    column.visible(this.checked);
                });
            });
        }

        function buildColumns(availableColumns, visibleColumns, columnConfig) {
            var columns = [];

            availableColumns.forEach(function(col) {
                var config = columnConfig[col] || { title: col.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase()) };
                columns.push({
                    data: col,
                    name: col,
                    title: config.title,
                    render: config.render || null,
                    visible: visibleColumns.includes(col)
                });
            });

            return columns;
        }

        function initializeGeneSourceTables(geneSourceData, availableColumns, defaultVisible) {
            var geneTables = {};
            var currentGeneTable = null;

            // Column configuration (reuse from initializeTable)
            var columnConfig = {
                'approved_symbol': {
                    title: 'Gene Symbol',
                    render: function(data, type, row) {
                        if (type === 'display') {
                            var hgncId = row.hgnc_id_tooltip || '';
                            var tooltipText = hgncId ? 'HGNC ID: ' + hgncId : 'No HGNC ID';

                            // Use direct HGNC ID URL if available, otherwise fallback to search
                            var hgncUrl;
                            if (hgncId && hgncId.startsWith('HGNC:')) {
                                hgncUrl = 'https://www.genenames.org/data/gene-symbol-report/#!/hgnc_id/' + hgncId;
                                tooltipText += ' (Click to view gene report)';
                            } else {
                                hgncUrl = 'https://www.genenames.org/tools/search/#!/?query=' + encodeURIComponent(data);
                                tooltipText += ' (Click to search in HGNC)';
                            }

                            var geneLink = '<a href="' + hgncUrl + '" target="_blank" class="tooltip-cell gene-link" title="' + tooltipText + '">' + data + '</a>';
                            
                            // Add multi-source indicator if gene has multiple sources
                            var sourceCount = row.source_count || 0;
                            if (sourceCount > 1) {
                                var sourceNames = row.source_names_tooltip || '';
                                var multiBadge = '<span class="multi-source-badge" title="Found in ' + sourceCount + ' sources: ' + sourceNames + '">' + sourceCount + '</span>';
                                geneLink += ' ' + multiBadge;
                            }
                            
                            return geneLink;
                        }
                        return data;
                    }
                },
                'hgnc_id': { title: 'HGNC ID' },
                'gene_size': {
                    title: 'Gene Size (bp)',
                    render: function(data, type, row) {
                        if (type === 'display' && data !== null) {
                            return parseInt(data).toLocaleString();
                        }
                        return data;
                    }
                },
                'chromosome': { title: 'Chromosome' },
                'gene_start': {
                    title: 'Start',
                    render: function(data, type, row) {
                        if (type === 'display' && data !== null) {
                            return parseInt(data).toLocaleString();
                        }
                        return data;
                    }
                },
                'gene_end': {
                    title: 'End',
                    render: function(data, type, row) {
                        if (type === 'display' && data !== null) {
                            return parseInt(data).toLocaleString();
                        }
                        return data;
                    }
                },
                'biotype': { title: 'Biotype' },
                'gene_description': { title: 'Description' },
                'canonical_transcript_coverage': {
                    title: 'Canonical Coverage (bp)',
                    render: function(data, type, row) {
                        if (type === 'display' && data !== null) {
                            return parseInt(data).toLocaleString();
                        }
                        return data;
                    }
                },
                'mane_select_coverage': {
                    title: 'MANE Select Coverage (bp)',
                    render: function(data, type, row) {
                        if (type === 'display' && data !== null) {
                            return parseInt(data).toLocaleString();
                        }
                        return data;
                    }
                },
                'mane_clinical_coverage': {
                    title: 'MANE Clinical Coverage (bp)',
                    render: function(data, type, row) {
                        if (type === 'display' && data !== null) {
                            return parseInt(data).toLocaleString();
                        }
                        return data;
                    }
                },
                'source_count': {
                    title: 'Sources',
                    render: function(data, type, row) {
                        if (type === 'display') {
                            var sourceNames = row.source_names_tooltip || 'No source details';
                            return '<span class="tooltip-cell" title="' + sourceNames + '">' + data + '</span>';
                        }
                        return data;
                    }
                },
                'score': {
                    title: 'Score',
                    render: function(data, type, row) {
                        if (type === 'display' && data !== null && data !== undefined) {
                            var scoreClass = data >= 3 ? 'score-high' : data >= 1.5 ? 'score-medium' : 'score-low';
                            return '<span class="' + scoreClass + '">' + parseFloat(data).toFixed(2) + '</span>';
                        }
                        return data;
                    }
                },
                'include': {
                    title: 'Included',
                    render: function(data, type, row) {
                        if (type === 'display') {
                            var includeClass = data ? 'include-yes' : 'include-no';
                            var includeText = data ? 'Yes' : 'No';
                            return '<span class="' + includeClass + '">' + includeText + '</span>';
                        }
                        return data;
                    }
                },
                'veto_reasons': {
                    title: 'Veto Reasons',
                    render: function(data, type, row) {
                        if (type === 'display' && data) {
                            return '<span class="tooltip-cell" title="' + data + '" style="color: #e83e8c; font-weight: 500;">Veto Applied</span>';
                        }
                        return data || '';
                    }
                },
                'inclusion_reason': {
                    title: 'Inclusion Reason',
                    render: function(data, type, row) {
                        if (type === 'display') {
                            var reasonClass = '';
                            var displayText = '';
                            if (data === 'veto') {
                                reasonClass = 'style="color: #e83e8c; font-weight: 500;"';
                                displayText = 'Veto Override';
                            } else if (data === 'threshold+veto') {
                                reasonClass = 'style="color: #6f42c1; font-weight: 500;"';
                                displayText = 'Threshold + Veto';
                            } else {
                                reasonClass = 'style="color: #28a745;"';
                                displayText = 'Score Threshold';
                            }
                            return '<span ' + reasonClass + '>' + displayText + '</span>';
                        }
                        return data;
                    }
                }
            };

            // Create column toggles
            var togglesContainer = $('#columnToggles');
            togglesContainer.empty(); // Clear any existing toggles
            availableColumns.forEach(function(col) {
                var isVisible = defaultVisible.includes(col);
                var displayName = columnConfig[col] ? columnConfig[col].title : col.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase());

                var toggleHtml = '<div class="column-toggle">' +
                    '<input type="checkbox" id="toggle_' + col + '" ' + (isVisible ? 'checked' : '') + '>' +
                    '<label for="toggle_' + col + '">' + displayName + '</label>' +
                    '</div>';
                togglesContainer.append(toggleHtml);
            });

            // Create tables for each gene source
            Object.keys(geneSourceData).forEach(function(tableKey) {
                var tableData = geneSourceData[tableKey];
                if (tableData && tableData.length > 0) {
                    var tableId = 'geneTable_' + tableKey;
                    var containerDiv = '<div id="' + tableId + '_container" class="gene-table-container">' +
                                      '<table id="' + tableId + '" class="display" style="width:100%"><thead><tr></tr></thead></table>' +
                                      '</div>';
                    $('#geneTablesContainer').append(containerDiv);

                    // Build columns
                    var columns = buildColumns(availableColumns, defaultVisible, columnConfig);

                    // Initialize DataTable
                    var table = $('#' + tableId).DataTable({
                        data: tableData,
                        columns: columns,
                        pageLength: 25,
                        lengthMenu: [[10, 25, 50, 100, -1], [10, 25, 50, 100, "All"]],
                        order: [[columns.findIndex(col => col.data === 'score'), 'desc']],
                        responsive: true,
                        autoWidth: false,
                        scrollX: true,
                        processing: true,
                        language: {
                            processing: "Loading gene data...",
                            search: "Search genes:",
                            searchPlaceholder: "Gene names, scores, sources, reasons, etc.",
                            lengthMenu: "Show _MENU_ genes per page",
                            info: "Showing _START_ to _END_ of _TOTAL_ genes",
                            infoEmpty: "Showing 0 to 0 of 0 genes",
                            infoFiltered: "(filtered from _MAX_ total genes)",
                            paginate: {
                                first: "First",
                                last: "Last",
                                next: "Next",
                                previous: "Previous"
                            }
                        }
                    });

                    geneTables[tableKey] = table;
                }
            });

            // Show first table by default
            var firstTableKey = Object.keys(geneSourceData)[0];
            if (firstTableKey) {
                showGeneTable(firstTableKey, geneTables);
                currentGeneTable = firstTableKey;
                window.currentGeneTable = firstTableKey;
            }

            // Tab click handlers
            $('.gene-tab-button').on('click', function() {
                var tableKey = $(this).data('table');
                
                // Update tab styling
                $('.gene-tab-button').removeClass('active');
                $(this).addClass('active');

                // Show corresponding table
                showGeneTable(tableKey, geneTables);
                currentGeneTable = tableKey;
                window.currentGeneTable = tableKey;
            });

            // Add toggle event listeners for each table
            availableColumns.forEach(function(col) {
                $('#toggle_' + col).on('change', function() {
                    var isVisible = this.checked;
                    // Apply column visibility to all gene tables
                    Object.keys(geneTables).forEach(function(tableKey) {
                        var table = geneTables[tableKey];
                        var column = table.column(col + ':name');
                        column.visible(isVisible);
                    });
                });
            });

            function showGeneTable(tableKey, tables) {
                // Hide all tables
                $('.gene-table-container').removeClass('active');
                
                // Show selected table
                var tableId = 'geneTable_' + tableKey;
                $('#' + tableId + '_container').addClass('active');
                
                // Redraw table to fix column sizing
                if (tables[tableKey]) {
                    tables[tableKey].columns.adjust().draw();
                }
            }

            // Store current gene table for downloads
            window.currentGeneTable = currentGeneTable;
            window.geneTables = geneTables;
            window.geneSourceData = geneSourceData;
        }

        function createCharts(data) {
            // Score Distribution with natural boundaries
            if (data.scores && data.scores.length > 0) {
                var ctx1 = document.getElementById('scoreChart').getContext('2d');
                var scoreHistogram = createScoreHistogram(data.scores);
                new Chart(ctx1, {
                    type: 'bar',
                    data: {
                        labels: scoreHistogram.labels,
                        datasets: [{
                            label: 'Gene Count',
                            data: scoreHistogram.data,
                            backgroundColor: 'rgba(102, 126, 234, 0.6)',
                            borderColor: 'rgba(102, 126, 234, 1)',
                            borderWidth: 1
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: { display: false },
                            title: { display: true, text: 'Distribution of Gene Scores' }
                        },
                        scales: {
                            y: { beginAtZero: true, title: { display: true, text: 'Number of Genes' } },
                            x: { title: { display: true, text: 'Score Range' } }
                        }
                    }
                });
            }

            // Gene Size Distribution with natural boundaries
            if (data.gene_sizes && data.gene_sizes.length > 0) {
                var ctx2 = document.getElementById('geneSizeChart').getContext('2d');
                var sizeHistogram = createSizeHistogram(data.gene_sizes);
                new Chart(ctx2, {
                    type: 'bar',
                    data: {
                        labels: sizeHistogram.labels,
                        datasets: [{
                            label: 'Gene Count',
                            data: sizeHistogram.data,
                            backgroundColor: 'rgba(75, 192, 192, 0.6)',
                            borderColor: 'rgba(75, 192, 192, 1)',
                            borderWidth: 1
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: { display: false },
                            title: { display: true, text: 'Distribution of Gene Sizes' }
                        },
                        scales: {
                            y: { beginAtZero: true, title: { display: true, text: 'Number of Genes' } },
                            x: { title: { display: true, text: 'Gene Size (bp)' } }
                        }
                    }
                });
            }

            // Source Count Distribution
            if (data.source_counts && data.source_counts.length > 0) {
                var ctx3 = document.getElementById('sourceCountChart').getContext('2d');
                var sourceCountData = data.source_counts.reduce((acc, count) => {
                    acc[count] = (acc[count] || 0) + 1;
                    return acc;
                }, {});
                new Chart(ctx3, {
                    type: 'bar',
                    data: {
                        labels: Object.keys(sourceCountData).sort((a, b) => parseInt(a) - parseInt(b)),
                        datasets: [{
                            label: 'Gene Count',
                            data: Object.keys(sourceCountData).sort((a, b) => parseInt(a) - parseInt(b)).map(k => sourceCountData[k]),
                            backgroundColor: 'rgba(255, 99, 132, 0.6)',
                            borderColor: 'rgba(255, 99, 132, 1)',
                            borderWidth: 1
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: { display: false },
                            title: { display: true, text: 'Distribution of Source Counts' }
                        },
                        scales: {
                            y: { beginAtZero: true, title: { display: true, text: 'Number of Genes' } },
                            x: { title: { display: true, text: 'Number of Sources' } }
                        }
                    }
                });
            }

            // Transcript Size Distribution
            if (data.transcript_sizes && data.transcript_sizes.length > 0) {
                var ctx4 = document.getElementById('transcriptSizeChart').getContext('2d');
                var transcriptHistogram = createTranscriptSizeHistogram(data.transcript_sizes);
                new Chart(ctx4, {
                    type: 'bar',
                    data: {
                        labels: transcriptHistogram.labels,
                        datasets: [{
                            label: 'Transcript Count',
                            data: transcriptHistogram.data,
                            backgroundColor: 'rgba(255, 159, 64, 0.6)',
                            borderColor: 'rgba(255, 159, 64, 1)',
                            borderWidth: 1
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: { display: false },
                            title: { display: true, text: 'Distribution of Transcript Sizes' }
                        },
                        scales: {
                            y: { beginAtZero: true, title: { display: true, text: 'Number of Transcripts' } },
                            x: { title: { display: true, text: 'Transcript Size (bp)' } }
                        }
                    }
                });
            }
        }

        function createScoreHistogram(scores) {
            // Natural boundaries for scores: 0-1, 1-2, 2-3, 3-4, 4-5, 5+
            var boundaries = [0, 1, 2, 3, 4, 5, 999];
            var labels = ['0-1', '1-2', '2-3', '3-4', '4-5', '5+'];
            var histogram = new Array(labels.length).fill(0);

            scores.forEach(score => {
                for (var i = 0; i < boundaries.length - 1; i++) {
                    if (score >= boundaries[i] && score < boundaries[i + 1]) {
                        histogram[i]++;
                        break;
                    }
                }
            });

            return { labels: labels, data: histogram };
        }

        function createSizeHistogram(sizes) {
            // Natural boundaries for sizes: 0-10k, 10k-50k, 50k-100k, 100k-200k, 200k+
            var boundaries = [0, 10000, 50000, 100000, 200000, 500000, 999999999];
            var labels = ['0-10k', '10k-50k', '50k-100k', '100k-200k', '200k-500k', '500k+'];
            var histogram = new Array(labels.length).fill(0);

            sizes.forEach(size => {
                for (var i = 0; i < boundaries.length - 1; i++) {
                    if (size >= boundaries[i] && size < boundaries[i + 1]) {
                        histogram[i]++;
                        break;
                    }
                }
            });

            return { labels: labels, data: histogram };
        }

        function createTranscriptSizeHistogram(sizes) {
            // More granular boundaries for transcript sizes in 2kb steps
            var boundaries = [0, 2000, 4000, 6000, 8000, 10000, 12000, 14000, 16000, 18000, 20000, 25000, 30000, 999999999];
            var labels = ['0-2k', '2k-4k', '4k-6k', '6k-8k', '8k-10k', '10k-12k', '12k-14k', '14k-16k', '16k-18k', '18k-20k', '20k-25k', '25k-30k', '30k+'];
            var histogram = new Array(labels.length).fill(0);

            sizes.forEach(size => {
                for (var i = 0; i < boundaries.length - 1; i++) {
                    if (size >= boundaries[i] && size < boundaries[i + 1]) {
                        histogram[i]++;
                        break;
                    }
                }
            });

            return { labels: labels, data: histogram };
        }

        {% if has_snp_data %}
        function initializeSNPTables(snpTableData) {
            var currentTable = null;
            var snpTables = {};

            // SNP column configuration
            var snpColumnConfig = {
                'snp': {
                    title: 'VCF ID',
                    render: function(data, type, row) {
                        if (type === 'display' && data) {
                            // Parse chr:pos:ref:alt format for gnomAD URL
                            var parts = data.split(':');
                            if (parts.length >= 4) {
                                var chr = parts[0];
                                var pos = parts[1];
                                var ref = parts[2];
                                var alt = parts[3];
                                var gnomadId = chr + '-' + pos + '-' + ref + '-' + alt;
                                var url = 'https://gnomad.broadinstitute.org/variant/' + gnomadId + '?dataset=gnomad_r4';
                                return '<a href="' + url + '" target="_blank" class="gene-link" title="View variant in gnomAD">' + data + '</a>';
                            }
                        }
                        return data;
                    }
                },
                'rsid': {
                    title: 'rsID',
                    render: function(data, type, row) {
                        if (type === 'display' && data && data !== '') {
                            var url = 'https://www.ncbi.nlm.nih.gov/snp/' + data;
                            return '<a href="' + url + '" target="_blank" class="gene-link" title="View SNP in dbSNP">' + data + '</a>';
                        }
                        return data || '';
                    }
                },
                'source': { title: 'Source' },
                'category': { title: 'Category' },
                'snp_type': { title: 'SNP Type' },
                'hg38_chromosome': { title: 'Chr (hg38)' },
                'hg38_start': {
                    title: 'Position (hg38)',
                    render: function(data, type, row) {
                        if (type === 'display' && data !== null && data !== "") {
                            return parseInt(data).toLocaleString();
                        }
                        return data;
                    }
                },
                'hg38_end': {
                    title: 'End (hg38)',
                    render: function(data, type, row) {
                        if (type === 'display' && data !== null && data !== "") {
                            return parseInt(data).toLocaleString();
                        }
                        return data;
                    }
                },
                'hg38_allele_string': { title: 'Alleles (hg38)' },
                // Only hg38 coordinates are supported
            };

            // Create tables for each SNP type
            Object.keys(snpTableData).forEach(function(tableKey) {
                var tableData = snpTableData[tableKey];
                if (tableData && tableData.length > 0) {
                    var tableId = 'snpTable_' + tableKey;
                    var containerDiv = '<div id="' + tableId + '_container" class="snp-table-container" style="display: none;">' +
                                      '<table id="' + tableId + '" class="display" style="width:100%"><thead><tr></tr></thead></table>' +
                                      '</div>';
                    $('#snpTablesContainer').append(containerDiv);

                    // Get available columns from first row
                    var availableColumns = Object.keys(tableData[0] || {});
                    var columns = availableColumns.map(function(col) {
                        var config = snpColumnConfig[col] || { title: col.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase()) };
                        return {
                            data: col,
                            title: config.title,
                            render: config.render || null
                        };
                    });

                    // Initialize DataTable
                    var table = $('#' + tableId).DataTable({
                        data: tableData,
                        columns: columns,
                        pageLength: 25,
                        lengthMenu: [[10, 25, 50, 100, -1], [10, 25, 50, 100, "All"]],
                        order: [[0, 'asc']],
                        responsive: true,
                        autoWidth: false,
                        scrollX: true,
                        processing: true,
                        language: {
                            processing: "Loading SNP data...",
                            search: "Search SNPs:",
                            searchPlaceholder: "rsID, chromosome, position, etc.",
                            lengthMenu: "Show _MENU_ SNPs per page",
                            info: "Showing _START_ to _END_ of _TOTAL_ SNPs",
                            infoEmpty: "Showing 0 to 0 of 0 SNPs",
                            infoFiltered: "(filtered from _MAX_ total SNPs)",
                            paginate: {
                                first: "First",
                                last: "Last",
                                next: "Next",
                                previous: "Previous"
                            }
                        }
                    });

                    snpTables[tableKey] = table;
                }
            });

            // Show first table by default
            var firstTableKey = Object.keys(snpTableData)[0];
            if (firstTableKey) {
                showSNPTable(firstTableKey, snpTables);
                currentTable = firstTableKey;
            }

            // Tab click handlers
            $('.snp-tab-button').on('click', function() {
                var tableKey = $(this).data('table');
                
                // Update tab styling
                $('.snp-tab-button').css({
                    'background': '#f8f9fa',
                    'color': '#495057'
                });
                $(this).css({
                    'background': '#667eea',
                    'color': 'white'
                });

                // Show corresponding table
                showSNPTable(tableKey, snpTables);
                currentTable = tableKey;
            });

            function showSNPTable(tableKey, tables) {
                // Hide all tables
                $('.snp-table-container').hide();
                
                // Show selected table
                var tableId = 'snpTable_' + tableKey;
                $('#' + tableId + '_container').show();
                
                // Redraw table to fix column sizing
                if (tables[tableKey]) {
                    tables[tableKey].columns.adjust().draw();
                }
            }
        }
        {% endif %}

        // Excel Download Functions
        function downloadAllGenesTable() {
            var geneData = window.geneSourceData.all_genes;
            exportGeneDataToExcel(geneData, 'all_genes');
        }

        function downloadCurrentGeneSourceTable() {
            var currentTable = window.currentGeneTable;
            var geneData = window.geneSourceData[currentTable];
            exportGeneDataToExcel(geneData, currentTable);
        }

        function exportGeneDataToExcel(data, tableType) {
            if (!data || data.length === 0) {
                alert('No gene data available to export.');
                return;
            }

            // Get headers from first row
            var headers = Object.keys(data[0]);
            
            // Create workbook
            var wb = XLSX.utils.book_new();
            var ws_data = [headers];
            
            // Add data rows
            data.forEach(function(row) {
                var rowData = headers.map(function(header) {
                    var value = row[header];
                    // Clean up HTML and format for Excel
                    if (typeof value === 'string') {
                        value = value.replace(/<[^>]*>/g, ''); // Remove HTML tags
                        if (value === 'null' || value === 'undefined') value = '';
                    }
                    return value || '';
                });
                ws_data.push(rowData);
            });

            var ws = XLSX.utils.aoa_to_sheet(ws_data);
            
            // Auto-size columns
            var range = XLSX.utils.decode_range(ws['!ref']);
            var colWidths = [];
            for (var C = range.s.c; C <= range.e.c; ++C) {
                var maxWidth = 0;
                for (var R = range.s.r; R <= range.e.r; ++R) {
                    var cell = ws[XLSX.utils.encode_cell({r: R, c: C})];
                    if (cell && cell.v) {
                        var cellWidth = cell.v.toString().length;
                        if (cellWidth > maxWidth) maxWidth = cellWidth;
                    }
                }
                colWidths.push({wch: Math.min(maxWidth + 2, 50)});
            }
            ws['!cols'] = colWidths;

            XLSX.utils.book_append_sheet(wb, ws, tableType.replace('_', ' ').toUpperCase());
            
            // Generate filename with current date
            var date = new Date();
            var filename = 'gene_data_' + tableType + '_' + date.toISOString().split('T')[0] + '.xlsx';
            
            XLSX.writeFile(wb, filename);
        }

        function downloadAllSNPTable() {
            {% if has_snp_data %}
            var snpData = {{ snp_table_data|safe }};
            
            if (snpData.all_snps && snpData.all_snps.length > 0) {
                exportSNPDataToExcel(snpData.all_snps, 'all_snps');
            } else {
                alert('No SNP data available to download.');
            }
            {% else %}
            alert('No SNP data available to download.');
            {% endif %}
        }

        function downloadCurrentSNPTable() {
            {% if has_snp_data %}
            var activeTab = $('.snp-tab-button.active').data('table');
            var snpData = {{ snp_table_data|safe }};
            
            if (snpData[activeTab] && snpData[activeTab].length > 0) {
                exportSNPDataToExcel(snpData[activeTab], activeTab);
            } else {
                alert('No SNP data available for current tab.');
            }
            {% else %}
            alert('No SNP data available to download.');
            {% endif %}
        }

        function exportSNPDataToExcel(data, tableType) {
            if (!data || data.length === 0) {
                alert('No data to export.');
                return;
            }

            // Get headers from first row
            var headers = Object.keys(data[0]);
            
            // Create workbook
            var wb = XLSX.utils.book_new();
            var ws_data = [headers];
            
            // Add data rows
            data.forEach(function(row) {
                var rowData = headers.map(function(header) {
                    var value = row[header];
                    // Clean up HTML and format for Excel
                    if (typeof value === 'string') {
                        value = value.replace(/<[^>]*>/g, ''); // Remove HTML tags
                        if (value === 'null' || value === 'undefined') value = '';
                    }
                    return value || '';
                });
                ws_data.push(rowData);
            });

            var ws = XLSX.utils.aoa_to_sheet(ws_data);
            
            // Auto-size columns
            var range = XLSX.utils.decode_range(ws['!ref']);
            var colWidths = [];
            for (var C = range.s.c; C <= range.e.c; ++C) {
                var maxWidth = 0;
                for (var R = range.s.r; R <= range.e.r; ++R) {
                    var cell = ws[XLSX.utils.encode_cell({r: R, c: C})];
                    if (cell && cell.v) {
                        var cellWidth = cell.v.toString().length;
                        if (cellWidth > maxWidth) maxWidth = cellWidth;
                    }
                }
                colWidths.push({wch: Math.min(maxWidth + 2, 50)});
            }
            ws['!cols'] = colWidths;

            XLSX.utils.book_append_sheet(wb, ws, tableType.replace('_', ' ').toUpperCase());
            
            // Generate filename with current date
            var date = new Date();
            var filename = 'snp_data_' + tableType + '_' + date.toISOString().split('T')[0] + '.xlsx';
            
            XLSX.writeFile(wb, filename);
        }

        // Initialize tracking for current SNP table
        var currentSNPTable = 'all_snps';
        {% if has_snp_data %}
        $(document).ready(function() {
            // Track current SNP table selection
            $('.snp-tab-button').on('click', function() {
                currentSNPTable = $(this).data('table');
            });
        });
        {% endif %}

        {% if has_regions_data %}
        // Regions table functionality
        function initializeRegionsTables(regionsTableData) {
            if (!regionsTableData || Object.keys(regionsTableData).length === 0) {
                return;
            }

            // Regions column configuration
            var regionsColumnConfig = {
                'region_name': { 
                    title: 'Region Name',
                    render: function(data, type, row) {
                        if (type === 'display') {
                            var chr = row.chromosome || '';
                            var start = row.start || '';
                            var end = row.end || '';
                            var coords = chr && start && end ? chr + ':' + start + '-' + end : '';
                            var tooltipText = coords ? 'Coordinates: ' + coords : 'No coordinates available';
                            return '<span class="tooltip-cell" title="' + tooltipText + '">' + data + '</span>';
                        }
                        return data;
                    }
                },
                'chromosome': { title: 'Chromosome' },
                'start': { 
                    title: 'Start',
                    render: function(data, type, row) {
                        if (type === 'display') {
                            return data ? parseInt(data).toLocaleString() : '';
                        }
                        return data;
                    }
                },
                'end': { 
                    title: 'End',
                    render: function(data, type, row) {
                        if (type === 'display') {
                            return data ? parseInt(data).toLocaleString() : '';
                        }
                        return data;
                    }
                },
                'coverage': { 
                    title: 'Coverage (bp)',
                    render: function(data, type, row) {
                        if (type === 'display') {
                            return data ? parseInt(data).toLocaleString() : '';
                        }
                        return data;
                    }
                },
                'source_type': { title: 'Source Type' },
                'region_type': { title: 'Region Type' },
                'comment': { 
                    title: 'Comment',
                    render: function(data, type, row) {
                        if (type === 'display' && data && data.length > 50) {
                            return '<span class="tooltip-cell" title="' + data + '">' + data.substring(0, 50) + '...</span>';
                        }
                        return data || '';
                    }
                }
            };

            var regionsTables = {};
            var regionsTabButtons = $('#regionsTabButtons');

            // Create tables for each region type
            Object.keys(regionsTableData).forEach(function(tableKey) {
                var data = regionsTableData[tableKey];
                if (data && data.length > 0) {
                    // Determine columns present in data
                    var availableColumns = Object.keys(data[0]);
                    var columns = availableColumns.map(function(col) {
                        return {
                            data: col,
                            title: regionsColumnConfig[col] ? regionsColumnConfig[col].title : col,
                            render: regionsColumnConfig[col] ? regionsColumnConfig[col].render : null
                        };
                    });

                    // Create table container
                    var tableId = 'regionsTable_' + tableKey;
                    var tableHtml = '<table id="' + tableId + '" class="display compact" style="width:100%"></table>';
                    $('#regionsTablesContainer').append('<div id="' + tableId + '_container" class="regions-table-container" style="display:none;">' + tableHtml + '</div>');

                    // Initialize DataTable
                    regionsTables[tableKey] = $('#' + tableId).DataTable({
                        data: data,
                        columns: columns,
                        pageLength: 25,
                        responsive: true,
                        dom: 'Bfrtip',
                        buttons: ['copy', 'csv', 'excel'],
                        language: {
                            processing: "Loading regions data...",
                            search: "Search regions:",
                            lengthMenu: "Show _MENU_ regions per page",
                            info: "Showing _START_ to _END_ of _TOTAL_ regions",
                            infoEmpty: "Showing 0 to 0 of 0 regions",
                            infoFiltered: "(filtered from _MAX_ total regions)",
                        }
                    });
                }
            });

            // Show first table by default
            var firstTableKey = Object.keys(regionsTables)[0];
            if (firstTableKey) {
                showRegionsTable(firstTableKey, regionsTables);
            }

            // Tab click handlers
            $('.regions-tab-button').on('click', function() {
                var tableKey = $(this).data('table');
                
                // Update tab styling
                $('.regions-tab-button').css({
                    'background': '#f8f9fa',
                    'color': '#495057'
                });
                $(this).css({
                    'background': '#667eea',
                    'color': 'white'
                });
                
                // Update active class
                $('.regions-tab-button').removeClass('active');
                $(this).addClass('active');

                // Show corresponding table
                showRegionsTable(tableKey, regionsTables);
            });

            function showRegionsTable(tableKey, tables) {
                // Hide all tables
                $('.regions-table-container').hide();
                
                // Show selected table
                var tableId = 'regionsTable_' + tableKey;
                $('#' + tableId + '_container').show();
                
                // Redraw table to fix column sizing
                if (tables[tableKey]) {
                    tables[tableKey].columns.adjust().draw();
                }
            }
        }

        function downloadAllRegionsTable() {
            {% if has_regions_data %}
            if (regionsTableData && regionsTableData.all_regions) {
                exportRegionsDataToExcel(regionsTableData.all_regions, 'all_regions');
            } else {
                alert('No regions data available to download.');
            }
            {% else %}
            alert('No regions data available to download.');
            {% endif %}
        }

        function downloadCurrentRegionsTable() {
            {% if has_regions_data %}
            var activeTab = $('.regions-tab-button.active').data('table');
            if (regionsTableData && regionsTableData[activeTab]) {
                exportRegionsDataToExcel(regionsTableData[activeTab], activeTab);
            } else {
                alert('No regions data available for current tab.');
            }
            {% else %}
            alert('No regions data available to download.');
            {% endif %}
        }

        function exportRegionsDataToExcel(data, tableType) {
            if (!data || data.length === 0) {
                alert('No data to export.');
                return;
            }

            // Create workbook
            var wb = XLSX.utils.book_new();
            
            // Convert data to worksheet
            var ws = XLSX.utils.json_to_sheet(data);
            
            // Auto-size columns
            var colWidths = [];
            if (data.length > 0) {
                Object.keys(data[0]).forEach(function(key) {
                    var maxLen = key.length;
                    data.forEach(function(row) {
                        var cellValue = String(row[key] || '');
                        if (cellValue.length > maxLen) {
                            maxLen = cellValue.length;
                        }
                    });
                    colWidths.push({wch: Math.min(maxLen + 2, 50)});
                });
                ws['!cols'] = colWidths;
            }
            
            // Add worksheet to workbook
            XLSX.utils.book_append_sheet(wb, ws, 'Regions');
            
            // Generate filename with current date
            var date = new Date();
            var filename = 'regions_data_' + tableType + '_' + date.toISOString().split('T')[0] + '.xlsx';
            
            XLSX.writeFile(wb, filename);
        }

        // Initialize tracking for current regions table
        var currentRegionsTable = 'all_regions';
        $(document).ready(function() {
            // Track current regions table selection
            $(document).on('click', '.regions-tab-button', function() {
                currentRegionsTable = $(this).data('table');
            });
        });
        {% endif %}
    </script>
</body>
</html>